// Code generated by goctl. DO NOT EDIT.
package model

import (
	"context"
	"time"

	"github.com/zeromicro/go-zero/core/stores/monc"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"google.golang.org/protobuf/proto"
)

var prefixItemCacheKey = "cache:item:"

type itemModel interface {
	Insert(ctx context.Context, data *Item) error
	FindOne(ctx context.Context, id string) (*Item, error)
	Update(ctx context.Context, data *Item) (*mongo.UpdateResult, error)
	Delete(ctx context.Context, id string, realDelete bool) (int64, error)
	List(ctx context.Context, filter *Item, offset, limit int64, orderBy, order string) ([]*Item, int64, error)
}

type defaultItemModel struct {
	conn *monc.Model
}

func newDefaultItemModel(conn *monc.Model) *defaultItemModel {
	return &defaultItemModel{conn: conn}
}

func (m *defaultItemModel) Insert(ctx context.Context, data *Item) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
	}
	now := time.Now().Unix()
	data.CreateAt = proto.Int64(now)
	data.UpdateAt = proto.Int64(now)
	data.DeleteAt = proto.Int64(0)

	key := prefixItemCacheKey + data.ID.Hex()
	_, err := m.conn.InsertOne(ctx, key, data)
	return err
}

func (m *defaultItemModel) FindOne(ctx context.Context, id string) (*Item, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Item
	key := prefixItemCacheKey + id
	err = m.conn.FindOne(ctx, key, &data, bson.M{"_id": oid, "DeleteAt": 0})
	switch err {
	case nil:
		return &data, nil
	case monc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultItemModel) Update(ctx context.Context, data *Item) (*mongo.UpdateResult, error) {
	data.UpdateAt = proto.Int64(time.Now().Unix())
	key := prefixItemCacheKey + data.ID.Hex()
	res, err := m.conn.UpdateOne(ctx, key, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return res, err
}

func (m *defaultItemModel) Delete(ctx context.Context, id string, realDelete bool) (int64, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return 0, ErrInvalidObjectId
	}
	if realDelete {
		key := prefixItemCacheKey + id
		res, err := m.conn.DeleteOne(ctx, key, bson.M{"_id": oid})
		return res, err
	} else {
		key := prefixItemCacheKey + id
		data, err := m.FindOne(ctx, id)
		if err != nil {
			return 0, err
		}
		data.DeleteAt = proto.Int64(time.Now().Unix())
		res, err := m.conn.UpdateOne(ctx, key, bson.M{"_id": oid}, bson.M{"$set": data})
		m.conn.DelCache(ctx, key)
		return res.ModifiedCount, err
	}
}

func (m *defaultItemModel) List(ctx context.Context, filter *Item, offset, limit int64, orderBy, order string) ([]*Item, int64, error) {
	var datas []*Item
	if filter == nil {
		filter = new(Item)
	}
	filter.DeleteAt = proto.Int64(0)
	total, err := m.conn.CountDocuments(ctx, filter)
	switch err {
	case nil:
	case monc.ErrNotFound:
		return nil, 0, ErrNotFound
	default:
		return nil, 0, err
	}
	findOptions := &options.FindOptions{
		Limit: proto.Int64(int64(limit)),
		Skip:  proto.Int64(int64(offset)),
	}
	if orderBy != "" {
		if order == "desc" {
			findOptions.SetSort(bson.D{{orderBy, -1}})
		} else {
			findOptions.SetSort(bson.D{{orderBy, 1}})
		}
	}
	err = m.conn.Find(ctx, &datas, filter, findOptions)
	switch err {
	case nil:
	case monc.ErrNotFound:
		return nil, total, ErrNotFound
	default:
		return nil, total, err
	}
	return datas, total, err
}
