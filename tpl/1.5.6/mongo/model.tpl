// Code generated by goctl. DO NOT EDIT.
package model

import (
    "context"
    "time"

    {{if .Cache}}"github.com/zeromicro/go-zero/core/stores/monc"{{else}}"github.com/zeromicro/go-zero/core/stores/mon"{{end}}
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/bson/primitive"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/mongo/options"
    "google.golang.org/protobuf/proto"
)

{{if .Cache}}var prefix{{.Type}}CacheKey = "cache:{{.lowerType}}:"{{end}}

type {{.lowerType}}Model interface{
    Insert(ctx context.Context,data *{{.Type}}) error
    FindOne(ctx context.Context,id string) (*{{.Type}}, error)
    Find(ctx context.Context,filter *{{.Type}}) ([]*{{.Type}}, error)
    Update(ctx context.Context,data *{{.Type}}) (*mongo.UpdateResult, error)
    Delete(ctx context.Context,id string,realDelete bool) (int64, error)
    List(ctx context.Context,filter *{{.Type}},offset,limit int64,orderBy,order string) ([]*{{.Type}}, int64, error)
}

type default{{.Type}}Model struct {
    conn {{if .Cache}}*monc.Model{{else}}*mon.Model{{end}}
}

func newDefault{{.Type}}Model(conn {{if .Cache}}*monc.Model{{else}}*mon.Model{{end}}) *default{{.Type}}Model {
    return &default{{.Type}}Model{conn: conn}
}


func (m *default{{.Type}}Model) Insert(ctx context.Context, data *{{.Type}}) error {
    if data.ID.IsZero() {
        data.ID = primitive.NewObjectID()
    }
	now := time.Now().Unix()
	data.CreateAt = proto.Int64(now)
	data.UpdateAt = proto.Int64(now)
	data.DeleteAt = proto.Int64(0)

    {{if .Cache}}key := prefix{{.Type}}CacheKey + data.ID.Hex(){{end}}
    _, err := m.conn.InsertOne(ctx, {{if .Cache}}key, {{end}} data)
    return err
}

func (m *default{{.Type}}Model) FindOne(ctx context.Context, id string) (*{{.Type}}, error) {
    oid, err := primitive.ObjectIDFromHex(id)
    if err != nil {
        return nil, ErrInvalidObjectId
    }

    var data {{.Type}}
    {{if .Cache}}key := prefix{{.Type}}CacheKey + id{{end}}
    err = m.conn.FindOne(ctx, {{if .Cache}}key, {{end}}&data, bson.M{"_id": oid, "DeleteAt": 0})
    switch err {
    case nil:
        return &data, nil
    case {{if .Cache}}monc{{else}}mon{{end}}.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *default{{.Type}}Model) Find(ctx context.Context, filter *{{.Type}}) ([]*{{.Type}}, error) {
    var datas []*{{.Type}}
    if filter == nil {
		filter = new({{.Type}})
	}
	filter.DeleteAt = proto.Int64(0)

  err := m.conn.Find(ctx, &datas, filter)
    switch err {
    case nil:
    case {{if .Cache}}monc{{else}}mon{{end}}.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
    return datas, err
}

func (m *default{{.Type}}Model) Update(ctx context.Context, data *{{.Type}}) (*mongo.UpdateResult, error) {
    data.UpdateAt = proto.Int64(time.Now().Unix())
    {{if .Cache}}key := prefix{{.Type}}CacheKey + data.ID.Hex(){{end}}
    res, err := m.conn.UpdateOne(ctx, {{if .Cache}}key, {{end}}bson.M{"_id": data.ID}, bson.M{"$set": data})
    return res, err
}

func (m *default{{.Type}}Model) Delete(ctx context.Context, id string, realDelete bool) (int64, error) {
    oid, err := primitive.ObjectIDFromHex(id)
    if err != nil {
        return 0, ErrInvalidObjectId
    }
    if realDelete {
        {{if .Cache}}key := prefix{{.Type}}CacheKey +id{{end}}
        res, err := m.conn.DeleteOne(ctx, {{if .Cache}}key, {{end}}bson.M{"_id": oid})
        return res, err
    } else {
        {{if .Cache}}key := prefix{{.Type}}CacheKey +id{{end}}
        data, err := m.FindOne(ctx, id) 
        if err != nil {
            return 0, err
        }
        data.DeleteAt = proto.Int64(time.Now().Unix())
        res, err := m.conn.UpdateOne(ctx, {{if .Cache}}key, {{end}}bson.M{"_id": oid}, bson.M{"$set": data})
        {{if .Cache}}m.conn.DelCache(ctx, key){{end}}
        return res.ModifiedCount, err
    }
}

func (m *default{{.Type}}Model) List(ctx context.Context,filter *{{.Type}},offset,limit int64,orderBy,order string) ([]*{{.Type}}, int64, error) {
    var datas []*{{.Type}}
    if filter == nil {
		filter = new({{.Type}})
	}
	filter.DeleteAt = proto.Int64(0)
    total, err := m.conn.CountDocuments(ctx, filter)
	switch err {
	case nil:
	case {{if .Cache}}monc{{else}}mon{{end}}.ErrNotFound:
		return nil, 0, ErrNotFound
	default:
		return nil, 0, err
	}
    findOptions := &options.FindOptions{
		Limit: proto.Int64(int64(limit)),
		Skip:  proto.Int64(int64(offset)),
	}
    if orderBy != "" {
		if order == "desc" {
			findOptions.SetSort(bson.D{{"{{"}}orderBy, -1{{"}}"}})
		} else {
			findOptions.SetSort(bson.D{{"{{"}}orderBy, 1{{"}}"}})
		}
	}
    err = m.conn.Find(ctx, &datas, filter, findOptions)
    switch err {
    case nil:
    case {{if .Cache}}monc{{else}}mon{{end}}.ErrNotFound:
        return nil, total, ErrNotFound
    default:
        return nil, total, err
    }
    return datas, total, err
}